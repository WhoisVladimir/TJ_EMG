//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""UserInput"",
            ""id"": ""74d16a21-7831-4640-85eb-728ea7a58fa6"",
            ""actions"": [
                {
                    ""name"": ""DeltaMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d6101631-1541-4dd5-827e-d966239b3eb2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRotationActivator"",
                    ""type"": ""Button"",
                    ""id"": ""138845e7-74ae-42b6-9b12-0e9b54b35ef8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MapMoving"",
                    ""type"": ""Button"",
                    ""id"": ""6066f92d-03ff-4434-93cc-41a2e6cbd0e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5128dfde-59fd-4c68-8c4f-b8efb913f7b5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""DeltaMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60becb7d-447e-4348-916b-6e715822c4ba"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MapMoving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Right Mouse Button + Shift"",
                    ""id"": ""a828fe1d-4269-46b1-9585-7ab58cb38bb8"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationActivator"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""aadd2adb-d267-466f-ba5f-c95984d2caa8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CamRotationActivator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""17ba8aaa-f58b-4fb9-a6cb-f34581d15caa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CamRotationActivator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SelectionMode"",
            ""id"": ""dae7d933-da4f-49c3-8201-759e28c09ec7"",
            ""actions"": [
                {
                    ""name"": ""Multiselect"",
                    ""type"": ""Button"",
                    ""id"": ""68c556fe-e9de-440c-9edc-e7db30d0736c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldSelection"",
                    ""type"": ""Button"",
                    ""id"": ""fc1494f1-81b3-4205-8c06-5e4c13447ba6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""025d3c85-d0ae-4b4f-925f-566824a2c4da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""f1ca7810-1539-42e6-b30e-8160b5c667b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AlterMotion"",
                    ""type"": ""Button"",
                    ""id"": ""eb8ce0ad-6a20-4561-a9cc-d5d046c2921f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9e04f6e-6fc0-4d9b-93a4-78b37f809069"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""385b073e-2544-4c4a-8407-ef03380afafa"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2cd212f-078d-4fcb-aa47-c312d1f244db"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82adefaf-5ebd-4a6c-a2d8-8440204c7ec1"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AlterMotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1efbd2e4-7838-497d-b9ec-ad756515b450"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Multiselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EditorMode"",
            ""id"": ""c49a7fa6-2844-47f7-9fb7-3abe4fca95ce"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""86664c0d-3187-44ef-8529-c1b12a9d700c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c356065-d3da-47c8-beb7-0afc96416297"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // UserInput
        m_UserInput = asset.FindActionMap("UserInput", throwIfNotFound: true);
        m_UserInput_DeltaMouse = m_UserInput.FindAction("DeltaMouse", throwIfNotFound: true);
        m_UserInput_CamRotationActivator = m_UserInput.FindAction("CamRotationActivator", throwIfNotFound: true);
        m_UserInput_MapMoving = m_UserInput.FindAction("MapMoving", throwIfNotFound: true);
        // SelectionMode
        m_SelectionMode = asset.FindActionMap("SelectionMode", throwIfNotFound: true);
        m_SelectionMode_Multiselect = m_SelectionMode.FindAction("Multiselect", throwIfNotFound: true);
        m_SelectionMode_HoldSelection = m_SelectionMode.FindAction("HoldSelection", throwIfNotFound: true);
        m_SelectionMode_Select = m_SelectionMode.FindAction("Select", throwIfNotFound: true);
        m_SelectionMode_Delete = m_SelectionMode.FindAction("Delete", throwIfNotFound: true);
        m_SelectionMode_AlterMotion = m_SelectionMode.FindAction("AlterMotion", throwIfNotFound: true);
        // EditorMode
        m_EditorMode = asset.FindActionMap("EditorMode", throwIfNotFound: true);
        m_EditorMode_Select = m_EditorMode.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UserInput
    private readonly InputActionMap m_UserInput;
    private List<IUserInputActions> m_UserInputActionsCallbackInterfaces = new List<IUserInputActions>();
    private readonly InputAction m_UserInput_DeltaMouse;
    private readonly InputAction m_UserInput_CamRotationActivator;
    private readonly InputAction m_UserInput_MapMoving;
    public struct UserInputActions
    {
        private @Controls m_Wrapper;
        public UserInputActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeltaMouse => m_Wrapper.m_UserInput_DeltaMouse;
        public InputAction @CamRotationActivator => m_Wrapper.m_UserInput_CamRotationActivator;
        public InputAction @MapMoving => m_Wrapper.m_UserInput_MapMoving;
        public InputActionMap Get() { return m_Wrapper.m_UserInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserInputActions set) { return set.Get(); }
        public void AddCallbacks(IUserInputActions instance)
        {
            if (instance == null || m_Wrapper.m_UserInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UserInputActionsCallbackInterfaces.Add(instance);
            @DeltaMouse.started += instance.OnDeltaMouse;
            @DeltaMouse.performed += instance.OnDeltaMouse;
            @DeltaMouse.canceled += instance.OnDeltaMouse;
            @CamRotationActivator.started += instance.OnCamRotationActivator;
            @CamRotationActivator.performed += instance.OnCamRotationActivator;
            @CamRotationActivator.canceled += instance.OnCamRotationActivator;
            @MapMoving.started += instance.OnMapMoving;
            @MapMoving.performed += instance.OnMapMoving;
            @MapMoving.canceled += instance.OnMapMoving;
        }

        private void UnregisterCallbacks(IUserInputActions instance)
        {
            @DeltaMouse.started -= instance.OnDeltaMouse;
            @DeltaMouse.performed -= instance.OnDeltaMouse;
            @DeltaMouse.canceled -= instance.OnDeltaMouse;
            @CamRotationActivator.started -= instance.OnCamRotationActivator;
            @CamRotationActivator.performed -= instance.OnCamRotationActivator;
            @CamRotationActivator.canceled -= instance.OnCamRotationActivator;
            @MapMoving.started -= instance.OnMapMoving;
            @MapMoving.performed -= instance.OnMapMoving;
            @MapMoving.canceled -= instance.OnMapMoving;
        }

        public void RemoveCallbacks(IUserInputActions instance)
        {
            if (m_Wrapper.m_UserInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUserInputActions instance)
        {
            foreach (var item in m_Wrapper.m_UserInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UserInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UserInputActions @UserInput => new UserInputActions(this);

    // SelectionMode
    private readonly InputActionMap m_SelectionMode;
    private List<ISelectionModeActions> m_SelectionModeActionsCallbackInterfaces = new List<ISelectionModeActions>();
    private readonly InputAction m_SelectionMode_Multiselect;
    private readonly InputAction m_SelectionMode_HoldSelection;
    private readonly InputAction m_SelectionMode_Select;
    private readonly InputAction m_SelectionMode_Delete;
    private readonly InputAction m_SelectionMode_AlterMotion;
    public struct SelectionModeActions
    {
        private @Controls m_Wrapper;
        public SelectionModeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Multiselect => m_Wrapper.m_SelectionMode_Multiselect;
        public InputAction @HoldSelection => m_Wrapper.m_SelectionMode_HoldSelection;
        public InputAction @Select => m_Wrapper.m_SelectionMode_Select;
        public InputAction @Delete => m_Wrapper.m_SelectionMode_Delete;
        public InputAction @AlterMotion => m_Wrapper.m_SelectionMode_AlterMotion;
        public InputActionMap Get() { return m_Wrapper.m_SelectionMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionModeActions set) { return set.Get(); }
        public void AddCallbacks(ISelectionModeActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectionModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectionModeActionsCallbackInterfaces.Add(instance);
            @Multiselect.started += instance.OnMultiselect;
            @Multiselect.performed += instance.OnMultiselect;
            @Multiselect.canceled += instance.OnMultiselect;
            @HoldSelection.started += instance.OnHoldSelection;
            @HoldSelection.performed += instance.OnHoldSelection;
            @HoldSelection.canceled += instance.OnHoldSelection;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
            @AlterMotion.started += instance.OnAlterMotion;
            @AlterMotion.performed += instance.OnAlterMotion;
            @AlterMotion.canceled += instance.OnAlterMotion;
        }

        private void UnregisterCallbacks(ISelectionModeActions instance)
        {
            @Multiselect.started -= instance.OnMultiselect;
            @Multiselect.performed -= instance.OnMultiselect;
            @Multiselect.canceled -= instance.OnMultiselect;
            @HoldSelection.started -= instance.OnHoldSelection;
            @HoldSelection.performed -= instance.OnHoldSelection;
            @HoldSelection.canceled -= instance.OnHoldSelection;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
            @AlterMotion.started -= instance.OnAlterMotion;
            @AlterMotion.performed -= instance.OnAlterMotion;
            @AlterMotion.canceled -= instance.OnAlterMotion;
        }

        public void RemoveCallbacks(ISelectionModeActions instance)
        {
            if (m_Wrapper.m_SelectionModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectionModeActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectionModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectionModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectionModeActions @SelectionMode => new SelectionModeActions(this);

    // EditorMode
    private readonly InputActionMap m_EditorMode;
    private List<IEditorModeActions> m_EditorModeActionsCallbackInterfaces = new List<IEditorModeActions>();
    private readonly InputAction m_EditorMode_Select;
    public struct EditorModeActions
    {
        private @Controls m_Wrapper;
        public EditorModeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_EditorMode_Select;
        public InputActionMap Get() { return m_Wrapper.m_EditorMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorModeActions set) { return set.Get(); }
        public void AddCallbacks(IEditorModeActions instance)
        {
            if (instance == null || m_Wrapper.m_EditorModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditorModeActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IEditorModeActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IEditorModeActions instance)
        {
            if (m_Wrapper.m_EditorModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditorModeActions instance)
        {
            foreach (var item in m_Wrapper.m_EditorModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditorModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditorModeActions @EditorMode => new EditorModeActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IUserInputActions
    {
        void OnDeltaMouse(InputAction.CallbackContext context);
        void OnCamRotationActivator(InputAction.CallbackContext context);
        void OnMapMoving(InputAction.CallbackContext context);
    }
    public interface ISelectionModeActions
    {
        void OnMultiselect(InputAction.CallbackContext context);
        void OnHoldSelection(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
        void OnAlterMotion(InputAction.CallbackContext context);
    }
    public interface IEditorModeActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
}
